/*
Given two sorted integer arrays nums1 and nums2, merge nums2 into nums1 as one sorted array.

Note:

    The number of elements initialized in nums1 and nums2 are m and n respectively.
    You may assume that nums1 has enough space (size that is greater or equal to m + n) to hold additional elements from nums2.

Example:

Input:
nums1 = [1,2,3,0,0,0], m = 3
nums2 = [2,5,6],       n = 3

Output: [1,2,2,3,5,6]
*/

// 88-合并两个有序数组  (E)
// Two Pointers

// 题目中num1有足够大的空间(>=m+n)
// 从后往前赋值，先比较num1和num2中最后一个元素的大小，把较大的复制到num1的m+n-1位置上，依次向前推。

class Solution {
public:
	void merge(vector<int>& nums1, int m, vector<int>& nums2, int n) {
		int end = m + n - 1;
		int i = m - 1, j = n - 1;

		while (i >= 0 && j >= 0)
			nums1[end--] = nums1[i] >= nums2[j] ? nums1[i--] : nums2[j--];

		while (j >= 0)
			nums1[end--] = nums2[j--];
	}
};

// Testing cases:
// [4,0,0,0,0,0]
// 1
// [1,2,3,5,6]
// 5
// Expected: [1,2,3,4,5,6]